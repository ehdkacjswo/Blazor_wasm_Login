@page "/fetchdata"
@using lda.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav

<UserComponent></UserComponent>

<h1>Weather forecast</h1>
<p>@state</p>
<p>This component demonstrates fetching data from the server.</p>
@if (string.IsNullOrEmpty(@userdata))
{
	<p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else
{
	if (forecasts == null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<p><a href="javascript:;" @onclick="GetTodaysForecast">TODAY'S FORECAST</a></p>
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
					<th>User</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var forecast in forecasts)
				{
					<tr>
						<td>@forecast.Date.ToShortDateString()</td>
						<td>@forecast.TemperatureC</td>
						<td>@forecast.TemperatureF</td>
						<td>@forecast.Summary</td>
						<td>@forecast.UserName</td>
					</tr>
				}
			</tbody>
		</table>
	}
}

@code {

	private List<WeatherForecast> forecasts;
	string userdata = String.Empty;
	string state = String.Empty;

	private async Task<string> GetJWT()
	{
		userdata = await jsr.InvokeAsync<string>("sessionStorage.getItem", "user").ConfigureAwait(false);
		return await jsr.InvokeAsync<string>("sessionStorage.getItem", "jwt").ConfigureAwait(false);
	}

	private async Task GetTodaysForecast()
	{
		userdata = await jsr.InvokeAsync<string>("sessionStorage.getItem", "user").ConfigureAwait(false);
		
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"/api/weatherforecast/{DateTime.Now.ToString("yyyy-MM-dd")}");
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				userdata = null;
				
				// Logged in, but token is expired
				if(!string.IsNullOrEmpty(userdata)) nav.NavigateTo("/Logout");
			}
			
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				forecasts = null;
			}
				
			else if (response.IsSuccessStatusCode)
			{
				var forecast = await response.Content.ReadFromJsonAsync<WeatherForecast>();
				forecasts.Clear();
				forecasts.Add(forecast);
			}
		}
		catch (Exception ex)
		{

		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		userdata = await jsr.InvokeAsync<string>("sessionStorage.getItem", "user").ConfigureAwait(false);
		
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/weatherforecast");
			
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				forecasts = null;
				
				// Logged in, but token is expired
				if(!string.IsNullOrEmpty(userdata)) nav.NavigateTo("/Logout");
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				forecasts = null;
			}
				
			else if (response.IsSuccessStatusCode)
			{
				forecasts = await response.Content.ReadFromJsonAsync<List<WeatherForecast>>();
			}
		}
		catch (Exception ex)
		{

		}
	}
}
