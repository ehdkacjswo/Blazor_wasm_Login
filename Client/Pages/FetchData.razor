@page "/fetchdata"
@using lda.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav

<UserComponent></UserComponent>

<h1>Weather forecast</h1>
<p>This component demonstrates fetching data from the server.</p>

<p><em>@message</em></p>

<p><a href="javascript:;" @onclick="GetTodaysForecast">TODAY'S FORECAST</a></p>
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
				<th>User</th></tr>
		</thead>
		<tbody>
		@foreach (var forecast in forecasts)
		{
			<tr>
				<td>@forecast.Date.ToShortDateString()</td>
				<td>@forecast.TemperatureC</td>
				<td>@forecast.TemperatureF</td>
				<td>@forecast.Summary</td>
				<td>@forecast.UserName</td></tr>
		}
		</tbody></table>

@code {
	private List<WeatherForecast> forecasts = new List<WeatherForecast>();
	string message = String.Empty;

	private async Task GetTodaysForecast()
	{
		// Not logged in
		if (string.IsNullOrEmpty(Global.jwt))
		{
			message = "Login to access the data.";
			return;
		}
		
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"/api/weatherforecast/{DateTime.Now.ToString("yyyy-MM-dd")}");
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				forecasts.Clear();
				Global.user = String.Empty;
				
				// Logged in, but token is expired
				if(!string.IsNullOrEmpty(Global.user)) nav.NavigateTo("/Logout");
			}
			
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				forecasts.Clear();
			}
				
			else if (response.IsSuccessStatusCode)
			{
				var forecast = await response.Content.ReadFromJsonAsync<WeatherForecast>();
				forecasts.Clear();
				forecasts.Add(forecast);
			}
		}
		catch (Exception ex)
		{

		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		
		// Not logged in
		if (string.IsNullOrEmpty(Global.jwt))
		{
			message = "Login to access the data.";
			return;
		}

		try
		{
			message = "Loading...";
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/weatherforecast");
			
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				message = "Incorrect or expired JWT";
				forecasts.Clear();	

				// Logged in, but token is expired
				if(!string.IsNullOrEmpty(Global.jwt)) nav.NavigateTo("/Logout");
			}
			
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				message = "No content from server";
				forecasts.Clear();
			}
				
			else if (response.IsSuccessStatusCode)
			{
				message = "Content loaded from server";
				forecasts = await response.Content.ReadFromJsonAsync<List<WeatherForecast>>();
			}
		}
		catch (Exception ex)
		{

		}
	}
}
